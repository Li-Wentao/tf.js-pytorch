"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var activations_1 = require("./layers/activations");
var advanced_activations_1 = require("./layers/advanced_activations");
var convolution_1 = require("./layers/convolution");
var core_1 = require("./layers/core");
var merge_1 = require("./layers/merge");
var pooling_1 = require("./layers/pooling");
var util = require("./util");
var nodeFactory = {
    'Add': merge_1.Add,
    'AveragePool': pooling_1.AveragePool,
    'Concat': merge_1.Concat,
    'Conv': convolution_1.Conv,
    'Dropout': core_1.Dropout,
    'Elu': activations_1.Elu,
    'FC': core_1.Dense,
    'Flatten': core_1.Flatten,
    'GlobalAveragePool': pooling_1.GlobalAveragePool,
    'GlobalMaxPool': pooling_1.GlobalMaxPool,
    'HardSigmoid': activations_1.HardSigmoid,
    'MaxPool': pooling_1.MaxPool,
    'Mul': merge_1.Mul,
    'Relu': activations_1.Relu,
    'Reshape': core_1.Reshape,
    'Sigmoid': activations_1.Sigmoid,
    'Softmax': advanced_activations_1.Softmax,
    'Softplus': activations_1.Softplus,
    'Softsign': activations_1.Softsign,
    'Tanh': activations_1.Tanh,
};
function load(modelUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var model;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    model = new OnnxModel(modelUrl);
                    return [4, model.load()];
                case 1:
                    _a.sent();
                    return [2, model.getModel()];
            }
        });
    });
}
exports.load = load;
var OnnxModel = (function () {
    function OnnxModel(modelUrl) {
        this.modelUrl = modelUrl;
    }
    OnnxModel.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4, util.loadOnnxModel(this.modelUrl)];
                    case 1:
                        _a.onnx = _b.sent();
                        this.graph = this.onnx.graph;
                        this.blobShapes = util.getBlobShapes(this.graph);
                        this.blobValues = util.getBlobValues(this.graph);
                        return [2];
                }
            });
        });
    };
    OnnxModel.prototype.getModel = function () {
        var _this = this;
        var outputNames = this.graph.output.map(function (d) { return d.name; });
        var inputName = this.graph.input[this.graph.input.length - 1].name;
        var inputConf = { shape: util.getInputShape(this.blobShapes[inputName]) };
        var input = tf.input(inputConf);
        this.blobs = {};
        this.blobs[inputName] = input;
        var _loop_1 = function (i) {
            var currNode = this_1.graph.node[i];
            var inputBlobs = [];
            for (var j = 0; j < currNode.input.length; ++j) {
                var inputNodeName = currNode.input[j];
                if (this_1.blobs.hasOwnProperty(inputNodeName)) {
                    inputBlobs.push(this_1.blobs[inputNodeName]);
                }
            }
            var currLayer = this_1.getTfjsLayer(currNode, inputBlobs);
            if (inputBlobs.length > 0) {
                var output_1 = currLayer.apply(inputBlobs);
                currNode.output.forEach(function (d) {
                    _this.blobs[d] = output_1;
                });
            }
        };
        var this_1 = this;
        for (var i = 0; i < this.graph.node.length; ++i) {
            _loop_1(i);
        }
        var outputs = outputNames.map(function (d) { return _this.blobs[d]; });
        var config = { inputs: input, outputs: outputs, name: this.graph.name };
        return tf.model(config);
    };
    OnnxModel.prototype.getLayers = function (graph) {
        var _this = this;
        var nodes = graph.node;
        var layers = nodes.map(function (d) { return _this.getTfjsLayer(d); });
        var names = nodes.map(function (d) { return d.output[0]; });
        return util.joinArraysToObj(names, layers);
    };
    OnnxModel.prototype.getTfjsLayer = function (node, input) {
        if (nodeFactory.hasOwnProperty(node.opType)) {
            var onnxNode = nodeFactory[node.opType].from(this);
            return onnxNode.getTfjsLayer(node, input);
        }
        throw new Error("'" + node.opType + "' is not implemented in tfjs-onnx.");
    };
    return OnnxModel;
}());
exports.OnnxModel = OnnxModel;
