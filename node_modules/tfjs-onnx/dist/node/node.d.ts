import * as tf from '@tensorflow/tfjs';
import { SymbolicTensor, Tensor } from '@tensorflow/tfjs';
import { DType } from '@tensorflow/tfjs-core/dist/types';
import { Layer, LayerConfig } from '@tensorflow/tfjs-layers/dist/engine/topology';
import { Initializer } from '@tensorflow/tfjs-layers/dist/initializers';
import { onnx } from 'onnx-proto';
import { OnnxModel } from './base';
export declare type StaticThis<T> = {
    new (model: OnnxModel): T;
};
export declare abstract class OnnxNode {
    model: OnnxModel;
    protected constructor(model: OnnxModel);
    static from<T extends OnnxNode>(this: StaticThis<T>, model: OnnxModel): T;
    abstract getTfjsLayerConfig(node: onnx.INodeProto, input?: SymbolicTensor[]): LayerConfig;
    abstract getTfjsLayer(node: onnx.INodeProto, input?: SymbolicTensor[]): Layer;
    getTfjsConfig(node: onnx.INodeProto, input?: SymbolicTensor[]): LayerConfig;
}
export declare class WeightInitializer extends Initializer {
    protected weights: Tensor;
    constructor(weights: Tensor);
    apply(shape: number[], dtype?: DType): tf.Tensor<tf.Rank>;
    getClassName(): string;
}
