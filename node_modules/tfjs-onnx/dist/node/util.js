"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var types_1 = require("@tensorflow/tfjs-core/dist/types");
var onnx_proto_1 = require("onnx-proto");
function normalizeArrayToObj(array, indexKey) {
    var normalizedObject = {};
    for (var i = 0; i < array.length; i++) {
        var key = array[i][indexKey];
        normalizedObject[key] = array[i];
    }
    return normalizedObject;
}
exports.normalizeArrayToObj = normalizeArrayToObj;
function joinArraysToObj(keys, values) {
    var normalizedObject = {};
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        normalizedObject[key] = values[i];
    }
    return normalizedObject;
}
exports.joinArraysToObj = joinArraysToObj;
function isNotNull(val) {
    return val !== undefined && val !== null;
}
exports.isNotNull = isNotNull;
function fetchText(uri) {
    return fetch(new Request(uri))
        .then(handleFetchErrors)
        .then(function (res) { return res.text(); });
}
exports.fetchText = fetchText;
function fetchArrayBuffer(uri) {
    return fetch(new Request(uri))
        .then(handleFetchErrors)
        .then(function (res) { return res.arrayBuffer(); });
}
exports.fetchArrayBuffer = fetchArrayBuffer;
function handleFetchErrors(response) {
    if (!response.ok) {
        throw Error(response.statusText);
    }
    return response;
}
function parseOnnxAxis(axis, shape) {
    return shape.length == 4 && axis == 1 ? 3 : axis;
}
exports.parseOnnxAxis = parseOnnxAxis;
function parseOnnxShape(shape) {
    var b = shape[0], c = shape[1], w = shape[2], h = shape[3];
    return shape.length == 4 ? [b, w, h, c] : shape;
}
exports.parseOnnxShape = parseOnnxShape;
function parseOnnxModel(data) {
    return onnx_proto_1.onnx.ModelProto.decode(new Uint8Array(data));
}
exports.parseOnnxModel = parseOnnxModel;
function parseAttrOrDefault(attr, def) {
    return attr === undefined ? def : parseOnnxAttr(attr);
}
exports.parseAttrOrDefault = parseAttrOrDefault;
function parseOnnxAttr(attr) {
    switch (attr.type) {
        case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOAT:
            return attr.f;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.INT:
            return attr.i;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.STRING:
            return attr.s;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSOR:
            return attr.t;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPH:
            return attr.g;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOATS:
            return attr.floats;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.INTS:
            return attr.ints;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.STRINGS:
            return attr.strings;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSORS:
            return attr.tensors;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPHS:
            return attr.graphs;
        case onnx_proto_1.onnx.AttributeProto.AttributeType.UNDEFINED:
        default:
            throw new Error("Cannot parse attr '" + attr.name + "'");
    }
}
exports.parseOnnxAttr = parseOnnxAttr;
function onnxTensorTypeToTfjsDtype(tensor) {
    switch (tensor.dataType) {
        case onnx_proto_1.onnx.TensorProto.DataType.INT8:
            throw new Error("Cannot use 'int8' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.INT16:
            throw new Error("Cannot use 'int16' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.INT32:
            return types_1.DType.int32;
        case onnx_proto_1.onnx.TensorProto.DataType.INT64:
            throw new Error("'Int64Array' type not suppoert in JavaScript");
        case onnx_proto_1.onnx.TensorProto.DataType.UINT8:
            throw new Error("Cannot use 'uint8' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
            throw new Error("Cannot use 'uint16' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.UINT32:
            throw new Error("Cannot use 'uint32' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
            throw new Error("Cannot use 'uint64' tensor in tfjs");
        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
            return types_1.DType.float32;
        case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
            console.warn("'double' type is not supported in tfjs. Converting to " + types_1.DType.float32);
            return types_1.DType.float32;
        case onnx_proto_1.onnx.TensorProto.DataType.UNDEFINED:
        default:
            throw new Error("Cannot parse tensor '" + tensor.dataType + "'");
    }
}
exports.onnxTensorTypeToTfjsDtype = onnxTensorTypeToTfjsDtype;
function parseOnnxTensor(tensor) {
    var getArrayBuffer = function (b) {
        var data = new Uint8Array(b);
        return data.buffer;
    };
    switch (tensor.dataType) {
        case onnx_proto_1.onnx.TensorProto.DataType.INT32:
            return new Int32Array(getArrayBuffer(tensor.rawData));
        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
            return new Float32Array(getArrayBuffer(tensor.rawData));
        case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
            return new Float32Array(new Float64Array(getArrayBuffer(tensor.rawData)));
        case onnx_proto_1.onnx.TensorProto.DataType.UNDEFINED:
        default:
            throw new Error("Cannot parse tensor '" + tensor.dataType + "'");
    }
}
exports.parseOnnxTensor = parseOnnxTensor;
function onnxShapeToTfjsShape(shape) {
    return shape.dim.map(function (d) { return d.dimValue; });
}
exports.onnxShapeToTfjsShape = onnxShapeToTfjsShape;
function getNamedAttrs(attrs) {
    return normalizeArrayToObj(attrs, 'name');
}
exports.getNamedAttrs = getNamedAttrs;
function getTfjsCommonConfig(node) {
    return { name: node.name };
}
exports.getTfjsCommonConfig = getTfjsCommonConfig;
function loadOnnxModel(modelUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, fetchArrayBuffer(modelUrl)];
                case 1:
                    buffer = _a.sent();
                    return [4, parseOnnxModel(buffer)];
                case 2: return [2, _a.sent()];
            }
        });
    });
}
exports.loadOnnxModel = loadOnnxModel;
function getBlobValues(graph) {
    var blobs = graph.initializer;
    var weights = blobs.map(onnxTensorToTfjsWeigths);
    var names = blobs.map(function (d) { return d.name; });
    return joinArraysToObj(names, weights);
}
exports.getBlobValues = getBlobValues;
function getValueInfo(valueInfo) {
    var shapes = valueInfo.map(function (d) { return d.type.tensorType.shape; }).map(onnxShapeToTfjsShape);
    var names = valueInfo.map(function (d) { return d.name; });
    return joinArraysToObj(names, shapes);
}
exports.getValueInfo = getValueInfo;
function getBlobShapes(graph) {
    var inputShapes = getValueInfo(graph.input);
    var outputShapes = getValueInfo(graph.output);
    return Object.assign({}, inputShapes, outputShapes);
}
exports.getBlobShapes = getBlobShapes;
function getInputShape(shape) {
    var _a = shape.length == 4 ? shape.slice(1) : shape, channels = _a[0], width = _a[1], height = _a[2];
    return [height, width, channels];
}
exports.getInputShape = getInputShape;
function getLayerName(node) {
    return node.name ? node.name : node.output[0];
}
exports.getLayerName = getLayerName;
function onnxTensorToTfjsWeigths(tensor) {
    var shape = tensor.dims;
    var dtype = onnxTensorTypeToTfjsDtype(tensor);
    var typedArray = parseOnnxTensor(tensor);
    var data = tf.tensor(typedArray, shape, dtype);
    return shape.length == 4 ? data.transpose([3, 2, 1, 0]) : data;
}
exports.onnxTensorToTfjsWeigths = onnxTensorToTfjsWeigths;
function loadImageData(url) {
    var img = new Image();
    return new Promise(function (resolve, reject) {
        img.crossOrigin = 'anonymous';
        img.src = url;
        img.onload = function () { return resolve(img); };
        img.onerror = reject;
    });
}
exports.loadImageData = loadImageData;
