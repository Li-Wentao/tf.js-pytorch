"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var node_1 = require("../node");
var util_1 = require("../util");
var Dense = (function (_super) {
    __extends(Dense, _super);
    function Dense() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dense.prototype.getTfjsLayerConfig = function (node) {
        var w = node.input[1];
        var b = node.input[2];
        var weightShape = this.model.blobShapes[w];
        var units = weightShape[0];
        var kernel = this.model.blobValues[w];
        var bias = this.model.blobValues[b];
        return {
            units: units, kernelInitializer: new node_1.WeightInitializer(kernel),
            biasInitializer: new node_1.WeightInitializer(bias)
        };
    };
    Dense.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.dense(conf);
    };
    return Dense;
}(node_1.OnnxNode));
exports.Dense = Dense;
var Dropout = (function (_super) {
    __extends(Dropout, _super);
    function Dropout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dropout.prototype.getTfjsLayerConfig = function (node) {
        var conf = util_1.getNamedAttrs(node.attribute);
        var ratio = util_1.parseAttrOrDefault(conf.ratio, 0);
        return {
            rate: ratio
        };
    };
    Dropout.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.dropout(conf);
    };
    return Dropout;
}(node_1.OnnxNode));
exports.Dropout = Dropout;
var Flatten = (function (_super) {
    __extends(Flatten, _super);
    function Flatten() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Flatten.prototype.getTfjsLayerConfig = function (node) {
        return {};
    };
    Flatten.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.flatten(conf);
    };
    return Flatten;
}(node_1.OnnxNode));
exports.Flatten = Flatten;
var Reshape = (function (_super) {
    __extends(Reshape, _super);
    function Reshape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Reshape.prototype.getTfjsLayerConfig = function (node) {
        var s = node.input[1];
        var shape = this.model.blobShapes[s];
        return { targetShape: util_1.parseOnnxShape(shape) };
    };
    Reshape.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.reshape(conf);
    };
    return Reshape;
}(node_1.OnnxNode));
exports.Reshape = Reshape;
