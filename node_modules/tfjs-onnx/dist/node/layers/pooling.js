"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var node_1 = require("../node");
var util_1 = require("../util");
var convolution_1 = require("./convolution");
var Pool = (function (_super) {
    __extends(Pool, _super);
    function Pool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pool.prototype.getTfjsLayerConfig = function (node) {
        var conf = util_1.getNamedAttrs(node.attribute);
        var poolSize = util_1.parseAttrOrDefault(conf.kernel_shape);
        var strides = util_1.parseAttrOrDefault(conf.strides, 1);
        var pads = util_1.parseAttrOrDefault(conf.pads, null);
        var autoPad = util_1.parseAttrOrDefault(conf.auto_pad, null);
        var padding = convolution_1.Conv.getTfjsPadding(pads, autoPad);
        return {
            poolSize: poolSize, strides: strides, padding: padding,
        };
    };
    Pool.getPoolDim = function (node) {
        var conf = util_1.getNamedAttrs(node.attribute);
        return util_1.parseAttrOrDefault(conf.kernel_shape, []).length || 2;
    };
    return Pool;
}(node_1.OnnxNode));
exports.Pool = Pool;
var MaxPool = (function (_super) {
    __extends(MaxPool, _super);
    function MaxPool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MaxPool.prototype.getTfjsLayer = function (node) {
        var dim = Pool.getPoolDim(node);
        var conf = this.getTfjsConfig(node);
        return dim == 1 ? tf.layers.maxPooling1d(conf) :
            tf.layers.maxPooling2d(conf);
    };
    return MaxPool;
}(Pool));
exports.MaxPool = MaxPool;
var AveragePool = (function (_super) {
    __extends(AveragePool, _super);
    function AveragePool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AveragePool.prototype.getTfjsLayer = function (node) {
        var dim = Pool.getPoolDim(node);
        var conf = this.getTfjsConfig(node);
        return dim == 1 ? tf.layers.averagePooling1d(conf) :
            tf.layers.averagePooling2d(conf);
    };
    return AveragePool;
}(Pool));
exports.AveragePool = AveragePool;
var GlobalMaxPool = (function (_super) {
    __extends(GlobalMaxPool, _super);
    function GlobalMaxPool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalMaxPool.prototype.getTfjsLayer = function (node) {
        var dim = Pool.getPoolDim(node);
        var conf = this.getTfjsConfig(node);
        return dim == 1 ?
            tf.layers.globalMaxPooling1d(conf) :
            tf.layers.globalMaxPooling2d(conf);
    };
    return GlobalMaxPool;
}(Pool));
exports.GlobalMaxPool = GlobalMaxPool;
var GlobalAveragePool = (function (_super) {
    __extends(GlobalAveragePool, _super);
    function GlobalAveragePool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalAveragePool.prototype.getTfjsLayer = function (node) {
        var dim = Pool.getPoolDim(node);
        var conf = this.getTfjsConfig(node);
        return dim == 1 ?
            tf.layers.globalAveragePooling1d(conf) :
            tf.layers.globalAveragePooling2d(conf);
    };
    return GlobalAveragePool;
}(Pool));
exports.GlobalAveragePool = GlobalAveragePool;
