"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var node_1 = require("../node");
var util_1 = require("../util");
var Conv = (function (_super) {
    __extends(Conv, _super);
    function Conv() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Conv.getTfjsPadding = function (pads, auto_pad) {
        var checkAutoPad = auto_pad !== null && auto_pad != 'VALID';
        var checkPads = pads !== null && pads.length > 0 && pads[0] != 0;
        return checkAutoPad || checkPads ? 'same' : 'valid';
    };
    Conv.getConvDim = function (node) {
        var conf = util_1.getNamedAttrs(node.attribute);
        return util_1.parseAttrOrDefault(conf.kernel_shape, []).length || 2;
    };
    Conv.prototype.getTfjsLayerConfig = function (node) {
        var conf = util_1.getNamedAttrs(node.attribute);
        var kernelSize = util_1.parseAttrOrDefault(conf.kernel_shape);
        var strides = util_1.parseAttrOrDefault(conf.strides, 1);
        var pads = util_1.parseAttrOrDefault(conf.pads, null);
        var autoPad = util_1.parseAttrOrDefault(conf.auto_pad, null);
        var padding = Conv.getTfjsPadding(pads, autoPad);
        var dilationRate = util_1.parseAttrOrDefault(conf.dilations, 1);
        var w = node.input[1];
        var b = node.input[2];
        var weightShape = this.model.blobShapes[w];
        var filters = weightShape[0];
        var kernel = this.model.blobValues[w];
        var bias = this.model.blobValues[b];
        return {
            kernelSize: kernelSize, strides: strides, padding: padding,
            dilationRate: dilationRate, filters: filters,
            kernelInitializer: new node_1.WeightInitializer(kernel),
            biasInitializer: new node_1.WeightInitializer(bias),
        };
    };
    Conv.prototype.getTfjsLayer = function (node) {
        var dim = Conv.getConvDim(node);
        var conf = this.getTfjsConfig(node);
        return dim == 1 ? tf.layers.conv1d(conf) : tf.layers.conv2d(conf);
    };
    return Conv;
}(node_1.OnnxNode));
exports.Conv = Conv;
