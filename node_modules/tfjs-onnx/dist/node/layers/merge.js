"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
var node_1 = require("../node");
var util_1 = require("../util");
var Concat = (function (_super) {
    __extends(Concat, _super);
    function Concat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Concat.prototype.getTfjsLayerConfig = function (node, input) {
        var conf = util_1.getNamedAttrs(node.attribute);
        var axis = util_1.parseAttrOrDefault(conf.axis, 0);
        var inShape = input[0].shape;
        return {
            axis: util_1.parseOnnxAxis(axis, inShape)
        };
    };
    Concat.prototype.getTfjsLayer = function (node, input) {
        var conf = this.getTfjsConfig(node, input);
        return tf.layers.concatenate(conf);
    };
    return Concat;
}(node_1.OnnxNode));
exports.Concat = Concat;
var Add = (function (_super) {
    __extends(Add, _super);
    function Add() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Add.prototype.getTfjsLayerConfig = function (node) {
        return {};
    };
    Add.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.add(conf);
    };
    return Add;
}(node_1.OnnxNode));
exports.Add = Add;
var Mul = (function (_super) {
    __extends(Mul, _super);
    function Mul() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mul.prototype.getTfjsLayerConfig = function (node) {
        return {};
    };
    Mul.prototype.getTfjsLayer = function (node) {
        var conf = this.getTfjsConfig(node);
        return tf.layers.multiply(conf);
    };
    return Mul;
}(node_1.OnnxNode));
exports.Mul = Mul;
